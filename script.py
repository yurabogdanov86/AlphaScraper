import logging
import time
import requests
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# -----------------------------------
# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------------
logging.basicConfig(
    filename='scraper.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
console_handler.setFormatter(formatter)
logging.getLogger().addHandler(console_handler)

# -----------------------------------
# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
# (—á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
# -----------------------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")

FILE_PATH = "previous_value.txt"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

def send_telegram_message(text):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not TOKEN or not CHANNEL_ID:
        logging.error("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {
        "chat_id": CHANNEL_ID,
        "text": text,
        "parse_mode": "Markdown"
    }

    response = requests.post(url, data=data)
    if response.status_code == 200:
        logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}, –¢–µ–∫—Å—Ç: {response.text}")

def read_previous_value():
    """–ß–∏—Ç–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —Ä–∏—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, "r", encoding="utf-8") as file:
            return file.read().strip()
    return None  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç

def write_new_value(value):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —Ä–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª"""
    with open(FILE_PATH, "w", encoding="utf-8") as file:
        file.write(value)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-gpu")
    options.headless = True  # –ë–µ–∑ GUI, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è GitHub Actions
    
    driver = webdriver.Chrome(options=options)

    try:
        url = "https://alfabank.ru/make-money/investments/help/trebuemoe-obespechenie/"
        logging.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: %s", url)
        driver.get(url)
        
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. BODY –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ '–§–æ–Ω–¥—ã' —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π
        for _ in range(3):
            driver.execute_script("window.scrollBy(0, 200);")
            time.sleep(1)
        logging.info("–ü—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ '–§–æ–Ω–¥—ã'.")

        # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ '–§–æ–Ω–¥—ã'
        try:
            fund_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), '–§–æ–Ω–¥—ã')]"))
            )
            ActionChains(driver).move_to_element(fund_button).perform()
            time.sleep(1)
            fund_button.click()
            logging.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–§–æ–Ω–¥—ã' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞!")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–§–æ–Ω–¥—ã': {e}")
            return
        
        logging.info("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        time.sleep(5)

        xpath_expr = "//p[@data-test-id='text' and contains(@class, '_8QWkTE')]"
        data_elements = driver.find_elements(By.XPATH, xpath_expr)

        extracted_data = [el.text.strip() for el in data_elements if el.text.strip()]
        
        logging.info("–ù–∞–π–¥–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º '_8QWkTE': %s", len(extracted_data), extracted_data)

        if len(extracted_data) >= 6:
            current_risk_rate = extracted_data[3]  # –°—Ç–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–µ–∫—É—â–∞—è)
            previous_risk_rate = read_previous_value()

            if previous_risk_rate is None or current_risk_rate != previous_risk_rate:
                message = f"""üîπ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —Ä–∏—Å–∫–∞!* üö®
1. {extracted_data[0]}
2. *ISIN:* {extracted_data[1]}
3. *–í–∞–ª—é—Ç–∞ —Ä–∏—Å–∫–∞:* {extracted_data[2]}
4. *–°—Ç–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ (–¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —Ç–µ–∫—É—â–∞—è):* {current_risk_rate} (–±—ã–ª–æ: {previous_risk_rate if previous_risk_rate else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
5. *–°—Ç–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ (–¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞—á–∞–ª—å–Ω–∞—è):* {extracted_data[4]}
6. *–°—Ç–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞—á–∞–ª—å–Ω–∞—è):* {extracted_data[5]}
"""
                send_telegram_message(message)
                write_new_value(current_risk_rate)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            else:
                logging.info("üìä –°—Ç–∞–≤–∫–∞ —Ä–∏—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
        else:
            logging.warning("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π! –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: %d", len(extracted_data))
            for i, val in enumerate(extracted_data, start=1):
                logging.warning("%d. %s", i, val)

    finally:
        driver.quit()
        logging.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    main()
